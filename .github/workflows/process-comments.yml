name: Process New Comments

on:
  issues:
    types: [opened]

jobs:
  process-comment:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Process new comment
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const issue = context.payload.issue;
          const commentBody = issue.body;
          
          // 解析评论内容（格式：chapterId|author|content）
          const match = commentBody.match(/chapter:(\S+)\s+author:([^|]+)\s+comment:(.+)/s);
          if (!match) {
            console.log('Invalid comment format');
            return;
          }
          
          const chapterId = match[1].trim();
          const author = match[2].trim() || '匿名用户';
          const content = match[3].trim();
          
          // 读取现有评论文件
          let comments = [];
          try {
            const commentsFile = await github.rest.repos.getContent({
              owner: context.repo.owner,
              repo: context.repo.repo,
              path: 'comments.json'
            });
            
            const contentBase64 = commentsFile.data.content;
            const contentString = Buffer.from(contentBase64, 'base64').toString();
            comments = JSON.parse(contentString);
          } catch (error) {
            console.log('Creating new comments file');
          }
          
          // 添加新评论
          const newComment = {
            id: issue.id.toString(),
            chapterId: chapterId,
            author: author,
            content: content,
            timestamp: issue.created_at,
            issueUrl: issue.html_url
          };
          
          comments.push(newComment);
          
          // 更新评论文件
          await github.rest.repos.createOrUpdateFileContents({
            owner: context.repo.owner,
            repo: context.repo.repo,
            path: 'comments.json',
            message: `Add comment from ${author} for ${chapterId}`,
            content: Buffer.from(JSON.stringify(comments, null, 2)).toString('base64'),
            sha: commentsFile ? commentsFile.data.sha : undefined
          });
          
          // 关闭Issue（可选）
          await github.rest.issues.update({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: issue.number,
            state: 'closed'
          });

    - name: Show success message
      run: echo "Comment processed successfully!"
